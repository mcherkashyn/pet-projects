name: Deploy Flask app to AWS ECS
on:
  push:
    branches:
      - main
jobs:

  build-services:
    env:
      ECR_REPOSITORY: "github-actions-ecr"
      AWS_REGION: "us-east-1"

    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v1

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker image build \
          --tag $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest \
          --tag $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG \
          .
        docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest
        docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG"
      working-directory: "./ci_cd_with_aws_ecs/web_app"

    - name: Sed
      run: |
        cd ci_cd_with_aws_ecs/web_app
        sed -i 's/{{ACCOUNT_ID}}/${{ secrets.ACCOUNT_ID }}/' task-definition.json

    - name: Render Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ci_cd_with_aws_ecs/web_app/task-definition.json
        container-name: site
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy to Amazon ECS service
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: github-actions-ecr
        cluster: github-actions-ecr
        wait-for-service-stability: true







    # - name: Setup terraform
    #   uses: hashicorp/setup-terraform@v1
    #   with:
    #         terraform_version: 1.3.9
      

    #   #deploy Terraform infrastructure
    # - name: Terraform init
    #   run: | 
    #     terraform init -input=false
    #   working-directory: "./ci_cd_with_aws_ecs/"

    # - name: Terraform plan
    #   run: |
    #     terraform plan
    #   working-directory: "./ci_cd_with_aws_ecs/"

    # - name: Terraform apply 
    #   env:
    #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
    #   run: | 
    #     terraform apply -auto-approve -input=false
    #   continue-on-error: true
    #   working-directory: "./ci_cd_with_aws_ecs/"

    #   #build docker container
    # - name: Build and push
    #   uses: docker/build-push-action@v4
    #   with:
    #     push: true
    #     tags: user/app:latest

    # - name: Docker build
    #   run: | 
    #     docker build -t docker_web_app .
    #   working-directory: "./ci_cd_with_aws_ecs/web_app"

    # - name: Docker push
    #   run: | 
    #     docker build -t docker_web_app .
    #   working-directory: "./ci_cd_with_aws_ecs/web_app"




    #   #deploy the app with ECS 
    # - name: Terraform app init
    #   run: | 
    #     terraform init -input=false
    #   working-directory: "./ci_cd_with_aws_ecs/ecs"

    # - name: Terraform app plan
    #   run: |
    #     terraform plan
    #   working-directory: "./ci_cd_with_aws_ecs/ecs"

    # - name: Terraform app apply 
    #   env:
    #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
    #   run: | 
    #     terraform apply -auto-approve -input=false
    #   working-directory: "./ci_cd_with_aws_ecs/ecs"


#      #destroy the app
#    - name: Terraform app init
#      run: | 
#        terraform init -input=false
#      working-directory: "./ci_cd_with_aws/"
#
#    - name: Terraform app plan
#      run: |
#        terraform plan
#      working-directory: "./ci_cd_with_aws/"
#
#    - name: Terraform app destroy 
#      env:
#        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
#      run: | 
#        terraform destroy -auto-approve -input=false
#      working-directory: "./ci_cd_with_aws/"
