name: Deploy Flask app to AWS with Terraform
on:
  push:
    branches:
      - main
jobs:


  build-services:
    env:
      AWS_REGION: us-east-1

    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
    - name: Checkout
      uses: actions/checkout@v1

    - name: Install dependencies
      run: |
        python -m venv env
        source env/bin/activate
        pip install -r ci_cd_with_aws/flaskapp/requirements.txt

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup terraform
      uses: hashicorp/setup-terraform@v1
      with:
            terraform_version: 1.3.9
      

#      #create terraform state s3 bucket
#    - name: Terraform backend init
#      run: | 
#        terraform init -input=false
#      working-directory: "./ci_cd_with_aws/backend/"
#
#    - name: Terraform backend plan
#      run: |
#        terraform plan
#      working-directory: "./ci_cd_with_aws/backend/"
#
#    - name: Terraform backend apply 
#      env:
#        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
#      run: | 
#        terraform apply -auto-approve -input=false
#      continue-on-error: true
#      working-directory: "./ci_cd_with_aws/backend/"


#        #deploy the app 
#    - name: Terraform app init
#      run: | 
#        terraform init -input=false
#      working-directory: "./ci_cd_with_aws/"

#    - name: Terraform app plan
#      run: |
#        terraform plan
#      working-directory: "./ci_cd_with_aws/"

#    - name: Terraform app apply 
#      env:
#        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
#      run: | 
#        terraform apply -auto-approve -input=false
#      working-directory: "./ci_cd_with_aws/"


        #destroy the app
    - name: Terraform app init
      run: | 
        terraform init -input=false
      working-directory: "./ci_cd_with_aws/"

    - name: Terraform app plan
      run: |
        terraform plan
      working-directory: "./ci_cd_with_aws/"

    - name: Terraform app destroy 
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
      run: | 
        terraform destroy -auto-approve -input=false
      working-directory: "./ci_cd_with_aws/"
        

      #destroy terraform state s3 bucket
    - name: Terraform bucket init
      run: | 
        terraform init -input=false
      working-directory: "./ci_cd_with_aws/backend/"

    - name: Terraform bucket plan
      run: |
        terraform plan
      working-directory: "./ci_cd_with_aws/backend/"

    - name: Terraform bucket destroy 
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
      run: | 
        terraform destroy -auto-approve -input=false
      working-directory: "./ci_cd_with_aws/backend/"
